#!/bin/sh
#

umask 0022

PRODUCT_NAME=avr
PRODUCT_FULLNAME="AVR"
PRODUCT_USER=$PRODUCT_NAME
PRODUCT_GROUP=$PRODUCT_NAME

PRODUCT_FULLNAME="CLASS"
PRODUCT_VER=he43.3.1.dev

CHANGENUM_VERSIONING=N

#MAJOR_VER=3
#MINOR_VER=7
#UPDATE_VER=1

JAVA_VER=1.8.0_66
JAVA_DIR=j2sdk$JAVA_VER

SUDO=sudo

COMPONENT_SERIES=$PRODUCT_NAME-$PRODUCT_VER
STAGING_DIR=/mnt/staging/builds.acn/$PRODUCT_VER/$PRODUCT_NAME
REPORTS_DIR=/mnt/scm/reports/diff/$PRODUCT_VER/$PRODUCT_NAME

source /home/build/scm/$PRODUCT_VER/common/scm/builds.common.sh
source /home/build/scm/$PRODUCT_VER/common/scm/perforce.common.sh

LASTBUILD=`p4 counter BUILD-$COMPONENT_SERIES`
CURRBUILD=`expr $LASTBUILD + 1`
LASTBUILD_NAME=$COMPONENT_SERIES-$LASTBUILD
CURRBUILD_NAME=$COMPONENT_SERIES-$CURRBUILD
TARFILE_NAME=$CURRBUILD_NAME.tar

BASE_DIR=../$PRODUCT_NAME
DEST_PROG_DIR=/usr/local/java/$PRODUCT_NAME
DEST_HOME_DIR=/home/$PRODUCT_USER
DEST_DATA_DIR=/home/myrio/$PRODUCT_NAME
DEST_URL_DIR=/home/myrio/html/$PRODUCT_NAME
QASYNCSCRIPT_DIR=$BASE_DIR/../qa/scm

PACKAGE_DIR=$BASE_DIR/Package

build_prep () {
	#############################################################################
	# BUILD PREP
	#############################################################################
	RETVAL=0
	if [ $UID -eq 0 ] ;  then
	  ERROR_STR="Do NOT run this as root!!"
	  RETVAL=1
	  return
	fi

	echo ''
	echo "------------------------------------------------------"
	echo "Preparing for build $CURRBUILD_NAME"
	echo "------------------------------------------------------"

	# Check for existence of current label
	x=`p4 labels | grep $CURRBUILD_NAME | wc -l`
	if [ $x -gt 0 ] ; then
	   ERROR_STR="ERROR: Label $CURRBUILD_NAME already exists"
	   RETVAL=2
	   return
	fi

	# Check for existence for template label
	x=`p4 labels | grep BUILD-$COMPONENT_SERIES | wc -l`
	if [ $x -lt 1 ] ; then
	   ERROR_STR="ERROR: Template label BUILD-$COMPONENT_SERIES does not exist"
	   RETVAL=2
	   return
	fi

	# Check for proper directory location
	if [ ! -d $BASE_DIR ] ; then
	   ERROR_STR="ERROR: Script not executed from proper directory.  Aborting."
	   RETVAL=2
	   return
	fi

	if [ -d $PACKAGE_DIR ] ; then
		echo "Cleaning up old packages..."
		rm -fr $PACKAGE_DIR
	fi
	echo "XXX Cleaning up old diff reports..."
	cd $BASE_DIR
	rm $PRODUCT_VER-*.txt

	echo "------------------------------------------------------"
	echo "Ready to build $CURRBUILD_NAME"
	echo "------------------------------------------------------"

	# Get last build number
	if [ $LASTBUILD -eq 0 ] ; then
	   echo '***'
	   echo "*** NOTE:  First build of $COMPONENT_SERIES series..."
	   echo '***'
	   echo ''
	fi

	echo "Press CTRL-C within 10 seconds to cancel..."
	sleep 10
	echo ''
	return
}


build () {
	#############################################################################
	# BUILD
	#############################################################################
	RETVAL=0
	echo ''
	echo '----------------------------------------------------------------'
	echo " Pre-Build cleanup for $CURRBUILD_NAME"
	echo '----------------------------------------------------------------'
	echo ''

	echo 'Cleaning targets...'
	$SUDO rm -rf $DEST_PROG_DIR $DEST_HOME_DIR $DEST_DATA_DIR $DEST_URL_DIR 2> /dev/null
	rm -f $BASE_DIR/*.log

	echo -n 'Checking Java version... '
	CURR_JAVA_VER=`java -version 2>&1 | awk ' NF==3 { split($3,x,"\""); print x[2]; }'`
	if [ "$CURR_JAVA_VER" != "$JAVA_VER" ]
	then
	  # Setting Java to correct version
	  echo "currently $CURR_JAVA_VER -- setting to $JAVA_VER"
	  (
		cd /usr
		if [ ! -d $JAVA_DIR ]
		then
		  ERROR_STR="Correct Java SDK directory $JAVA_DIR not found!"
		  RETVAL=1
		  return
		else
		  $SUDO rm -f java
		  $SUDO ln -sf $JAVA_DIR java
		fi
	  )
	  if [ $? -gt 0 ]
	  then
		ERROR_STR="Error setting Java version!"
		RETVAL=1
		return
	  fi
	else
	  echo " $CURR_JAVA_VER -- correct!"
	fi
																													 
	echo 'Cleaning targets...'
	$SUDO rm -rf  $DEST_PROG_DIR 2> /dev/null
	$SUDO rm -rf  $DEST_HOME_DIR 2> /dev/null
																													 
	echo ''
	echo '----------------------------------------------------------------'
	echo " Building $CURRBUILD_NAME"
	echo '----------------------------------------------------------------'
	echo ''
																													 
	cd $BASE_DIR
	$SUDO chown -R build:build *
																													 
	echo 'Building Avr...'
	ant clean dist >& $BASE_DIR/build_avr.log 
	if [ $? -gt 0 ] ; then
	  ERROR_STR="Error building avr!"
	  RETVAL=3
	  return
	fi

	# Finalizing build procedure
	cd $BASE_DIR 
	$SUDO chown -R build:build *

	echo 'Copying files to target paths...'
	$SUDO mkdir -p $DEST_PROG_DIR 2> /dev/null
	$SUDO mkdir -p $DEST_HOME_DIR/.ssh 2> /dev/null
	$SUDO mkdir -p $DEST_DATA_DIR 2> /dev/null
	$SUDO mkdir -p $DEST_URL_DIR 2> /dev/null
	(cd dist; $SUDO cp -a avr.jar log4j-1.2.15.jar *.properties $DEST_PROG_DIR/.)
	(cd dist; $SUDO cp -a tm.keystore $DEST_PROG_DIR/.)
	(cd dist; $SUDO cp -a *.sh $DEST_PROG_DIR/.)
	(cd dist; $SUDO cp -a authorized_keys $DEST_HOME_DIR/.ssh/.)
	(cd dist; $SUDO cp -a MY$PRODUCT_NAME /etc/init.d/.)
	$SUDO ln -sf $DEST_PROG_DIR/trends.sh $DEST_DATA_DIR/trends.sh
	$SUDO ln -sf $DEST_PROG_DIR/usage.sh $DEST_DATA_DIR/usage.sh
	(cd $DEST_PROG_DIR; for a in *.properties; do $SUDO ln -sf $DEST_PROG_DIR/$a $DEST_DATA_DIR/$a; done)
	$SUDO ln -sf /etc/init.d/MY$PRODUCT_NAME /etc/rc3.d/S92MY$PRODUCT_NAME
	$SUDO ln -sf /etc/init.d/MY$PRODUCT_NAME /etc/rc2.d/K92MY$PRODUCT_NAME

	echo 'Changing file permissions...'
	$SUDO chown -R $PRODUCT_USER:$PRODUCT_GROUP $DEST_HOME_DIR $DEST_PROG_DIR
	$SUDO chown -R myrio:myrio $DEST_DATA_DIR $DEST_URL_DIR
	$SUDO chown root:root /etc/init.d/MY$PRODUCT_NAME /etc/rc3.d/S92MY$PRODUCT_NAME /etc/rc2.d/K92MY$PRODUCT_NAME
	$SUDO chmod ugo+x /etc/init.d/MY$PRODUCT_NAME /etc/rc3.d/S92MY$PRODUCT_NAME /etc/rc2.d/K92MY$PRODUCT_NAME
	$SUDO chmod 600 $DEST_HOME_DIR/.ssh/*
	$SUDO chmod 700 $DEST_HOME_DIR/.ssh
	$SUDO chmod ugo+x $DEST_PROG_DIR/*.sh

	# Take care of the version file
	VERFILE_NAME=$PRODUCT_NAME.version
	VERFILE=$PWD/$VERFILE_NAME
	rm -f $VERFILE 2> /dev/null
	touch $VERFILE; chmod 755 $VERFILE
	echo '#' > $VERFILE
	echo '# Myrio Install Version file format 0.1' >> $VERFILE
	echo '#' >> $VERFILE
	echo "VERSION=$CURRBUILD_NAME" >> $VERFILE
	for a in $(tar tf $TARFILE_NAME | grep -v "/$" | grep -v "ssh") ; do
	   echo -n '#MD5 ' >> $VERFILE
	   md5sum $a >> $VERFILE
	done
	$SUDO chown $PRODUCT_USER:$PRODUCT_GROUP $VERFILE
	$SUDO mv $VERFILE $DEST_PROG_DIR

	create_tarballs
}

create_tarballs () {
	echo ''
	echo "------------------------------------------------------"
	echo "Creating $TARFILE_NAME" 
	echo "------------------------------------------------------"


	# Create tar file
	echo "Creating version file and $TARFILE_NAME..."
	$SUDO tar cfpP $TARFILE_NAME $DEST_PROG_DIR $DEST_HOME_DIR $DEST_DATA_DIR $DEST_URL_DIR /etc/init.d/MY$PRODUCT_NAME /etc/rc3.d/*MY$PRODUCT_NAME /etc/rc2.d/*MY$PRODUCT_NAME $DEST_PROG_DIR/$VERFILE_NAME
	if [ $? -gt 0 ] ; then
	  ERROR_STR="Error generating tar file"
	  RETVAL=3
	  return
	fi
	$SUDO chown build:build $TARFILE_NAME
	echo "Cleaning up host filesystem"
	if [ ! -d $PACKAGE_DIR ] ; then
		mkdir -p $PACKAGE_DIR
	fi
	mv $TARFILE_NAME $PACKAGE_DIR
	return
}


finish () {
#############################################################################
# FINISH
#############################################################################

echo "Copying tar file log to $STAGING_DIR/$BASE_SWVERSION..."
BUILDFILE_NAME=$PRODUCT_VER-$PRODUCT_NAME-$CURRBUILD
mkdir -p $STAGING_DIR
cp $PACKAGE_DIR/$TARFILE_NAME $STAGING_DIR/.

echo "Creating installation instructions..."
mkdir -p $STAGING_DIR/installnotes
(cd scm ; ./updateinstall.sh $BUILDFILE_NAME "$PRODUCT_VER" $STAGING_DIR/installnotes)

deploy

# Call QA version servlet
# echo "Calling QA version servlet..."
# $QASYNCSCRIPT_DIR/callVersionServlet.sh $CURRBUILD_NAME >& versionservlet.log

}

build_error () {
  # $* String pertaining to which section caused the error
  ERROR_REPORT="$*"
  LAST_LOG=`ls -lrt *.log | tail -n 1 | awk {'print $8'}`
  ln -s $BASE_DIR/$LAST_LOG $BASE_DIR/error.log
  if [ -d error.log ] ; then rm -f error.log ; fi
  echo -e "\n$ERROR_REPORT" >> $BASE_DIR/error.log
  echo ''
  echo "$ERROR_REPORT"
  echo "*** ERROR DURING BUILD!!! ***"
  exit 1
}

#
# MAIN SCRIPT
#
build_prep
  if [ $RETVAL -gt 0 ]; then build_error $ERROR_STR ; fi
build
  if [ $RETVAL -gt 0 ]; then build_error $ERROR_STR ; fi
finish
echo ''
echo "$BUILDFILE_NAME build completed!"

